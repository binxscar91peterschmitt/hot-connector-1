diff --git a/node_modules/@meteorwallet/sdk/dist/meteor-sdk/src/postMessage/MeteorPostMessenger.js b/node_modules/@meteorwallet/sdk/dist/meteor-sdk/src/postMessage/MeteorPostMessenger.js
index 7b05eb0..a2eef97 100644
--- a/node_modules/@meteorwallet/sdk/dist/meteor-sdk/src/postMessage/MeteorPostMessenger.js
+++ b/node_modules/@meteorwallet/sdk/dist/meteor-sdk/src/postMessage/MeteorPostMessenger.js
@@ -8,7 +8,7 @@ const query_string_1 = require("query-string");
 const error_handling_dappConnect_1 = require("../../../meteor-common/src/modules_feature/dapp_connect/error_handling_dappConnect");
 const constants_theme_1 = require("../../../meteor-common/src/modules_app_core/theme/constants_theme");
 class ComWindow {
-    constructor(connection, listener) {
+    async create(connection, listener) {
         const baseWalletUrl = envConfig_1.envConfig.wallet_base_url;
         const url = new URL(baseWalletUrl);
         this.walletOrigin = url.origin;
@@ -23,7 +23,17 @@ class ComWindow {
             const h = constants_theme_1.SIGN_POPUP_HEIGHT;
             const y = window.top.outerHeight / 2 + window.top.screenY - h / 2;
             const x = window.top.outerWidth / 2 + window.top.screenX - w / 2;
-            const newWindow = window.open(`${baseWalletUrl}/connect/${connection.network}/${connection.actionType}?${(0, query_string_1.stringify)(queryParams)}`, "_blank", `popup=1,width=${w},height=${h},top=${y},left=${x}`);
+
+            const newWindow = window.open(`${baseWalletUrl}/connect/${connection.network}/${connection.actionType}?${(0, query_string_1.stringify)(queryParams)}`, "_blank", `popup=1,width=${w},height=${h},top=${y},left=${x}`)
+            const id = await newWindow.windowIdPromise
+
+            if (id == null) {
+                throw new types_dappConnect_1.MeteorActionError({
+                    message: "Couldn't open popup window to complete wallet action",
+                    endTags: [error_handling_dappConnect_1.EDappActionErrorTag.POPUP_WINDOW_OPEN_FAILED],
+                });
+            }
+
             if (newWindow != null) {
                 this.websiteWindow = newWindow;
             }
@@ -221,7 +231,8 @@ class MeteorPostMessenger {
             delete this.comInterval;
         }
     }
-    addAndStartConnection(connection) {
+
+    async addAndStartConnection(connection) {
         if (this.connections.length > 0) {
             for (const con of this.connections) {
                 con.status = types_dappConnect_1.EDappActionConnectionStatus.disconnected;
@@ -230,7 +241,9 @@ class MeteorPostMessenger {
         }
         this.connections.push(connection);
         if (this.comWindow == null || !this.comWindow.hasActiveWindow()) {
-            this.comWindow = new ComWindow(connection, this.listener);
+            const comWindow = new ComWindow();
+            await comWindow.create(connection, this.listener);
+            this.comWindow = comWindow;
         }
         else {
             this.comWindow.focus();
